class HubArithmetic{constructor(){this.version="1.0.0"}propertiesOf(a){switch(a.toLowerCase()){case"addition":return["commutative","associative","distributive","additive identity",];case"subtraction":return["identity","distributive"];case"multiplication":return["commutative","associative","distributive","multiplicative identity",];default:return"N/A"}}improperToMixed(a){let b=+(a=a.split("/"))[0],c=+a[1],d=0;for(let e=1;+a[0]>=e&&b%c!=0;e+=1)d+=1,b-=1;return`${b/c?`${b/c} `:""}${d?`${d}/${c}`:""}`}mixedToImproper(a){return a=a.replace(" ","/").split("/"),`${+a[0]*+a[2]+ +a[1]}/${+a[2]}`}wholeNumToPercent(a,b){return 100*a/b}percentToWholeNum(a,b){return a*b/100}isEvenNum(a){return!Boolean(a%2)}isOddNum(a){return Boolean(a%2)}factorsOf(b){let c=[];for(let a=1;b>=a&&(b%a||c.push(a),Math.ceil(b/2)!==a);a+=1);return[...c,b]}isPrimeNum(a){return 1!==a&&this.factorsOf(a).toString()===[1,a].toString()}primeFactorsOf(b){let c=[],a=2;for(;b>=2;)b%a==0?(c.push(a),b/=a):a++;return c.length?c:null}LCMOf(d,e){let b=[],c=[];for(let a=1;;a+=1)if(b.push(d*a,e*a),(c=b.filter((a,b,c)=>c.indexOf(a)!==b)).length)return+c.toString()}GCFOf(a,b){return Math.max(...[...this.factorsOf(a),...this.factorsOf(b),].filter((a,b,c)=>c.indexOf(a)!==b))}}
